# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import scheme.engine_pb2 as engine__pb2


class MafiaEngineStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGame = channel.unary_unary(
                '/MafiaEngine/CreateGame',
                request_serializer=engine__pb2.CreateGameRequest.SerializeToString,
                response_deserializer=engine__pb2.CreateGameResponse.FromString,
                )
        self.Connect = channel.unary_unary(
                '/MafiaEngine/Connect',
                request_serializer=engine__pb2.ConnectRequest.SerializeToString,
                response_deserializer=engine__pb2.ConnectResponse.FromString,
                )
        self.StartGame = channel.unary_unary(
                '/MafiaEngine/StartGame',
                request_serializer=engine__pb2.StartGameRequest.SerializeToString,
                response_deserializer=engine__pb2.StartGameResponse.FromString,
                )
        self.GetState = channel.unary_unary(
                '/MafiaEngine/GetState',
                request_serializer=engine__pb2.GetStateRequest.SerializeToString,
                response_deserializer=engine__pb2.GetStateResponse.FromString,
                )
        self.GetNotifications = channel.unary_unary(
                '/MafiaEngine/GetNotifications',
                request_serializer=engine__pb2.GetNotificationsRequest.SerializeToString,
                response_deserializer=engine__pb2.GetNotificationsResponse.FromString,
                )
        self.MafiaChoose = channel.unary_unary(
                '/MafiaEngine/MafiaChoose',
                request_serializer=engine__pb2.MafiaChooseRequest.SerializeToString,
                response_deserializer=engine__pb2.MafiaChooseResponse.FromString,
                )
        self.DetectiveChoose = channel.unary_unary(
                '/MafiaEngine/DetectiveChoose',
                request_serializer=engine__pb2.DetectiveChooseRequest.SerializeToString,
                response_deserializer=engine__pb2.DetectiveChooseResponse.FromString,
                )
        self.LynchChoose = channel.unary_unary(
                '/MafiaEngine/LynchChoose',
                request_serializer=engine__pb2.LynchChooseRequest.SerializeToString,
                response_deserializer=engine__pb2.LynchChooseResponse.FromString,
                )


class MafiaEngineServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNotifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MafiaChoose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DetectiveChoose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LynchChoose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=engine__pb2.CreateGameRequest.FromString,
                    response_serializer=engine__pb2.CreateGameResponse.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=engine__pb2.ConnectRequest.FromString,
                    response_serializer=engine__pb2.ConnectResponse.SerializeToString,
            ),
            'StartGame': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGame,
                    request_deserializer=engine__pb2.StartGameRequest.FromString,
                    response_serializer=engine__pb2.StartGameResponse.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=engine__pb2.GetStateRequest.FromString,
                    response_serializer=engine__pb2.GetStateResponse.SerializeToString,
            ),
            'GetNotifications': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNotifications,
                    request_deserializer=engine__pb2.GetNotificationsRequest.FromString,
                    response_serializer=engine__pb2.GetNotificationsResponse.SerializeToString,
            ),
            'MafiaChoose': grpc.unary_unary_rpc_method_handler(
                    servicer.MafiaChoose,
                    request_deserializer=engine__pb2.MafiaChooseRequest.FromString,
                    response_serializer=engine__pb2.MafiaChooseResponse.SerializeToString,
            ),
            'DetectiveChoose': grpc.unary_unary_rpc_method_handler(
                    servicer.DetectiveChoose,
                    request_deserializer=engine__pb2.DetectiveChooseRequest.FromString,
                    response_serializer=engine__pb2.DetectiveChooseResponse.SerializeToString,
            ),
            'LynchChoose': grpc.unary_unary_rpc_method_handler(
                    servicer.LynchChoose,
                    request_deserializer=engine__pb2.LynchChooseRequest.FromString,
                    response_serializer=engine__pb2.LynchChooseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MafiaEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MafiaEngine(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaEngine/CreateGame',
            engine__pb2.CreateGameRequest.SerializeToString,
            engine__pb2.CreateGameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaEngine/Connect',
            engine__pb2.ConnectRequest.SerializeToString,
            engine__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaEngine/StartGame',
            engine__pb2.StartGameRequest.SerializeToString,
            engine__pb2.StartGameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaEngine/GetState',
            engine__pb2.GetStateRequest.SerializeToString,
            engine__pb2.GetStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaEngine/GetNotifications',
            engine__pb2.GetNotificationsRequest.SerializeToString,
            engine__pb2.GetNotificationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MafiaChoose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaEngine/MafiaChoose',
            engine__pb2.MafiaChooseRequest.SerializeToString,
            engine__pb2.MafiaChooseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DetectiveChoose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaEngine/DetectiveChoose',
            engine__pb2.DetectiveChooseRequest.SerializeToString,
            engine__pb2.DetectiveChooseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LynchChoose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MafiaEngine/LynchChoose',
            engine__pb2.LynchChooseRequest.SerializeToString,
            engine__pb2.LynchChooseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
